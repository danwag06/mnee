{"code":"import { Hash, OP, Utils } from '@bsv/sdk';\nexport const parseInscription = (script) => {\n    let fromPos;\n    for (let i = 0; i < script.chunks.length; i++) {\n        const chunk = script.chunks[i];\n        if (i >= 2 &&\n            chunk.data?.length === 3 &&\n            Utils.toUTF8(chunk.data) == 'ord' &&\n            script.chunks[i - 1].op == OP.OP_IF &&\n            script.chunks[i - 2].op == OP.OP_FALSE) {\n            fromPos = i + 1;\n        }\n    }\n    if (fromPos === undefined)\n        return;\n    const insc = {\n        file: { hash: '', size: 0, type: '' },\n        fields: {},\n    };\n    for (let i = fromPos; i < script.chunks.length; i += 2) {\n        const field = script.chunks[i];\n        if (field.op == OP.OP_ENDIF) {\n            break;\n        }\n        if (field.op > OP.OP_16)\n            return;\n        const value = script.chunks[i + 1];\n        if (value.op > OP.OP_PUSHDATA4)\n            return;\n        if (field.data?.length)\n            continue;\n        let fieldNo = 0;\n        if (field.op > OP.OP_PUSHDATA4 && field.op <= OP.OP_16) {\n            fieldNo = field.op - 80;\n        }\n        else if (field.data?.length) {\n            fieldNo = field.data[0];\n        }\n        switch (fieldNo) {\n            case 0:\n                insc.file.size = value.data?.length || 0;\n                if (!value.data?.length)\n                    break;\n                insc.file.hash = Utils.toBase64(Hash.sha256(value.data));\n                insc.file.content = value.data;\n                break;\n            case 1:\n                insc.file.type = Buffer.from(value.data || []).toString();\n                break;\n        }\n    }\n    return insc;\n};\nexport const parseCosignerScripts = (scripts) => {\n    return scripts.map((script) => {\n        const chunks = script.chunks;\n        for (let i = 0; i <= chunks.length - 6; i++) {\n            if (chunks[0 + i].op === OP.OP_DUP &&\n                chunks[1 + i].op === OP.OP_HASH160 &&\n                chunks[2 + i].data?.length === 20 &&\n                chunks[3 + i].op === OP.OP_EQUALVERIFY &&\n                chunks[4 + i].op === OP.OP_CHECKSIGVERIFY &&\n                chunks[5 + i].data?.length === 33 &&\n                chunks[6 + i].op === OP.OP_CHECKSIG) {\n                return {\n                    cosigner: Utils.toHex(chunks[5 + i].data || []),\n                    address: Utils.toBase58Check(chunks[2 + i].data || [], [0]),\n                };\n            }\n        }\n    });\n};\n//# sourceMappingURL=helper.js.map","references":["/Users/danwagner/Desktop/Code/mnee-ops/node_modules/@bsv/sdk/dist/types/mod.d.ts","/Users/danwagner/Desktop/Code/mnee-ops/src/mnee.types.ts"],"map":"{\"version\":3,\"file\":\"helper.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/helper.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/danwagner/Desktop/Code/mnee-ops/dist/utils/helper.d.ts","writeByteOrderMark":false,"text":"import { Script } from '@bsv/sdk';\nimport { Inscription, ParsedCosigner } from '../mnee.types';\nexport declare const parseInscription: (script: Script) => Inscription | undefined;\nexport declare const parseCosignerScripts: (scripts: any) => ParsedCosigner[];\n"}}
