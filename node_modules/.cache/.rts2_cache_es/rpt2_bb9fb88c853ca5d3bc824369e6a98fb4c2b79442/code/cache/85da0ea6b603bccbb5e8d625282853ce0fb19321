{"code":"import { MNEEService } from './mneeService.js';\nexport * from './mnee.types.js';\nexport default class Mnee {\n    service;\n    constructor(apiToken) {\n        this.service = new MNEEService(apiToken);\n    }\n    /**\n     * Validates an MNEE transaction.\n     *\n     * @param rawtx - The raw transaction to validate.\n     * @param request - An array of SendMNEE objects representing the transfer details. Use this parameter to validate the transaction against the specified transfer details. If it is not provided, it will only validate that the transaction is well-formed with the cosigner.\n     * @returns A promise that resolves to a boolean indicating whether the transaction is valid.\n     */\n    async validateMneeTx(rawtx, request) {\n        return this.service.validateMneeTx(rawtx, request);\n    }\n    /**\n     * Converts a given amount to its atomic representation based on the specified number of decimals.\n     *\n     * @param amount - The amount to be converted.\n     * @param decimals - The number of decimal places to consider for the atomic conversion.\n     * @returns The atomic representation of the given amount.\n     */\n    toAtomicAmount(amount, decimals) {\n        return this.service.toAtomicAmount(amount, decimals);\n    }\n    /**\n     * Retrieves the configuration for the MNEE service.\n     *\n     * @returns {Promise<MNEEConfig | undefined>} A promise that resolves to the MNEE configuration object,\n     * or undefined if the configuration could not be retrieved.\n     */\n    async config() {\n        return this.service.getConfig();\n    }\n    /**\n     * Retrieves the balance for a given address.\n     *\n     * @param address - The address to retrieve the balance for.\n     * @returns A promise that resolves to an MNEEBalance object containing the balance information.\n     */\n    async balance(address) {\n        return this.service.getBalance(address);\n    }\n    /**\n     * Transfers the specified MNEE tokens using the provided WIF (Wallet Import Format) key.\n     *\n     * @param {SendMNEE[]} request - An array of SendMNEE objects representing the transfer details.\n     * @param {string} wif - The Wallet Import Format key used to authorize the transfer.\n     * @returns {Promise<TransferResponse>} A promise that resolves to a TransferResponse object containing the result of the transfer.\n     */\n    async transfer(request, wif) {\n        return this.service.transfer(request, wif);\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/danwagner/Desktop/Code/mnee-ops/src/mneeService.ts","/Users/danwagner/Desktop/Code/mnee-ops/src/mnee.types.ts","/Users/danwagner/Desktop/Code/mnee-ops/src/mnee.types.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C,cAAc,iBAAiB,CAAC;AAUhC,MAAM,CAAC,OAAO,OAAO,IAAI;IACf,OAAO,CAAc;IAE7B,YAAY,QAAiB;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,cAAc,CAAC,KAAa,EAAE,OAAoB;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CAAC,MAAc,EAAE,QAAgB;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,OAAO,CAAC,OAAe;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,QAAQ,CAAC,OAAmB,EAAE,GAAW;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC7C,CAAC;CACF\"}","dts":{"name":"/Users/danwagner/Desktop/Code/mnee-ops/dist/index.d.ts","writeByteOrderMark":false,"text":"import { MNEEBalance, MNEEConfig, SendMNEE, TransferResponse } from './mnee.types.js';\nexport * from './mnee.types.js';\nexport interface MneeInterface {\n    config(): Promise<MNEEConfig | undefined>;\n    balance(address: string): Promise<MNEEBalance>;\n    validateMneeTx(rawtx: string, request?: SendMNEE[]): Promise<boolean>;\n    transfer(request: SendMNEE[], wif: string): Promise<TransferResponse>;\n    toAtomicAmount(amount: number, decimals: number): number;\n}\nexport default class Mnee implements MneeInterface {\n    private service;\n    constructor(apiToken?: string);\n    /**\n     * Validates an MNEE transaction.\n     *\n     * @param rawtx - The raw transaction to validate.\n     * @param request - An array of SendMNEE objects representing the transfer details. Use this parameter to validate the transaction against the specified transfer details. If it is not provided, it will only validate that the transaction is well-formed with the cosigner.\n     * @returns A promise that resolves to a boolean indicating whether the transaction is valid.\n     */\n    validateMneeTx(rawtx: string, request?: SendMNEE[]): Promise<boolean>;\n    /**\n     * Converts a given amount to its atomic representation based on the specified number of decimals.\n     *\n     * @param amount - The amount to be converted.\n     * @param decimals - The number of decimal places to consider for the atomic conversion.\n     * @returns The atomic representation of the given amount.\n     */\n    toAtomicAmount(amount: number, decimals: number): number;\n    /**\n     * Retrieves the configuration for the MNEE service.\n     *\n     * @returns {Promise<MNEEConfig | undefined>} A promise that resolves to the MNEE configuration object,\n     * or undefined if the configuration could not be retrieved.\n     */\n    config(): Promise<MNEEConfig | undefined>;\n    /**\n     * Retrieves the balance for a given address.\n     *\n     * @param address - The address to retrieve the balance for.\n     * @returns A promise that resolves to an MNEEBalance object containing the balance information.\n     */\n    balance(address: string): Promise<MNEEBalance>;\n    /**\n     * Transfers the specified MNEE tokens using the provided WIF (Wallet Import Format) key.\n     *\n     * @param {SendMNEE[]} request - An array of SendMNEE objects representing the transfer details.\n     * @param {string} wif - The Wallet Import Format key used to authorize the transfer.\n     * @returns {Promise<TransferResponse>} A promise that resolves to a TransferResponse object containing the result of the transfer.\n     */\n    transfer(request: SendMNEE[], wif: string): Promise<TransferResponse>;\n}\n"}}
