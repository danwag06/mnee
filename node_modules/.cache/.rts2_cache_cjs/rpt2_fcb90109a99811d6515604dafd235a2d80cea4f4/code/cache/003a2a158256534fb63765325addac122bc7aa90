{"code":"import { Hash, P2PKH, PrivateKey, PublicKey, Script, Transaction, TransactionSignature, UnlockingScript, Utils, } from '@bsv/sdk';\nimport CosignTemplate from './mneeCosignTemplate.js';\nimport * as jsOneSat from 'js-1sat-ord';\nimport { parseCosignerScripts, parseInscription } from './utils/helper.js';\nexport class MNEEService {\n    MNEE_TOKEN_ID = 'ae59f3b898ec61acbdb6cc7a245fabeded0c094bf046f35206a3aec60ef88127_0'; // prod mnee token\n    MNEE_COSIGNER_PROD = '020a177d6a5e6f3a8689acd2e313bd1cf0dcf5a243d1cc67b7218602aee9e04b2f'; // prod cosigner\n    MNEE_DECIMALS = 5;\n    mneeApiToken = '92982ec1c0975f31979da515d46bae9f';\n    mneeApi = 'https://proxy-api.mnee.net';\n    gorillaPoolApi = 'https://ordinals.1sat.app';\n    constructor(apiToken) {\n        if (apiToken)\n            this.mneeApiToken = apiToken;\n    }\n    async getConfig() {\n        try {\n            const response = await fetch(`${this.mneeApi}/v1/config?auth_token=${this.mneeApiToken}`, { method: 'GET' });\n            if (!response.ok)\n                throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            return data;\n        }\n        catch (error) {\n            console.error('Failed to fetch config:', error);\n            return undefined;\n        }\n    }\n    toAtomicAmount(amount, decimals) {\n        return Math.round(amount * 10 ** decimals);\n    }\n    async createInscription(recipient, amount, config) {\n        const inscriptionData = {\n            p: 'bsv-20',\n            op: 'transfer',\n            id: config.tokenId,\n            amt: amount.toString(),\n        };\n        return {\n            lockingScript: jsOneSat.applyInscription(new CosignTemplate().lock(recipient, PublicKey.fromString(config.approver)), {\n                dataB64: Buffer.from(JSON.stringify(inscriptionData)).toString('base64'),\n                contentType: 'application/bsv-20',\n            }),\n            satoshis: 1,\n        };\n    }\n    async getUtxos(address, ops = ['transfer', 'deploy+mint']) {\n        try {\n            const response = await fetch(`${this.mneeApi}/v1/utxos?auth_token=${this.mneeApiToken}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify([address]),\n            });\n            if (!response.ok)\n                throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            if (ops.length) {\n                return data.filter((utxo) => ops.includes(utxo.data.bsv21.op.toLowerCase()));\n            }\n            return data;\n        }\n        catch (error) {\n            console.error('Failed to fetch UTXOs:', error);\n            return [];\n        }\n    }\n    async broadcast(tx) {\n        const url = `${this.gorillaPoolApi}/v5/tx`;\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/octet-stream' },\n                body: Buffer.from(tx.toBinary()),\n            });\n            const body = await response.json();\n            if (!response.ok) {\n                return {\n                    status: 'error',\n                    code: response.status.toString(),\n                    description: body.error || 'Unknown error',\n                };\n            }\n            return {\n                status: 'success',\n                txid: body.txid,\n                message: 'Transaction broadcast successfully',\n            };\n        }\n        catch (error) {\n            console.error('Failed to broadcast:', error);\n            return {\n                status: 'error',\n                code: 'UNKNOWN',\n                description: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n    }\n    async fetchBeef(txid) {\n        const resp = await fetch(`${this.gorillaPoolApi}/v5/tx/${txid}/beef`);\n        if (resp.status === 404)\n            throw new Error('Transaction not found');\n        if (resp.status !== 200) {\n            throw new Error(`${resp.status} - Failed to fetch beef for tx ${txid}`);\n        }\n        const beef = [...Buffer.from(await resp.arrayBuffer())];\n        return Transaction.fromAtomicBEEF(beef);\n    }\n    async getSignatures(request, privateKey) {\n        try {\n            const DEFAULT_SIGHASH_TYPE = 65;\n            let tx;\n            switch (request.format) {\n                case 'beef':\n                    tx = Transaction.fromHexBEEF(request.rawtx);\n                    break;\n                case 'ef':\n                    tx = Transaction.fromHexEF(request.rawtx);\n                    break;\n                default:\n                    tx = Transaction.fromHex(request.rawtx);\n                    break;\n            }\n            const sigResponses = request.sigRequests.flatMap((sigReq) => {\n                return [privateKey].map((privKey) => {\n                    const preimage = TransactionSignature.format({\n                        sourceTXID: sigReq.prevTxid,\n                        sourceOutputIndex: sigReq.outputIndex,\n                        sourceSatoshis: sigReq.satoshis,\n                        transactionVersion: tx.version,\n                        otherInputs: tx.inputs.filter((_, index) => index !== sigReq.inputIndex),\n                        inputIndex: sigReq.inputIndex,\n                        outputs: tx.outputs,\n                        inputSequence: tx.inputs[sigReq.inputIndex].sequence || 0,\n                        subscript: sigReq.script\n                            ? Script.fromHex(sigReq.script)\n                            : new P2PKH().lock(privKey.toPublicKey().toAddress()),\n                        lockTime: tx.lockTime,\n                        scope: sigReq.sigHashType || DEFAULT_SIGHASH_TYPE,\n                    });\n                    const rawSignature = privKey.sign(Hash.sha256(preimage));\n                    const sig = new TransactionSignature(rawSignature.r, rawSignature.s, sigReq.sigHashType || DEFAULT_SIGHASH_TYPE);\n                    return {\n                        sig: Utils.toHex(sig.toChecksigFormat()),\n                        pubKey: privKey.toPublicKey().toString(),\n                        inputIndex: sigReq.inputIndex,\n                        sigHashType: sigReq.sigHashType || DEFAULT_SIGHASH_TYPE,\n                        csIdx: sigReq.csIdx,\n                    };\n                });\n            });\n            return Promise.resolve({ sigResponses });\n        }\n        catch (err) {\n            console.error('getSignatures error', err);\n            return {\n                error: {\n                    message: err.message ?? 'unknown',\n                    cause: err.cause,\n                },\n            };\n        }\n    }\n    async transfer(request, wif) {\n        try {\n            const config = await this.getConfig();\n            if (!config)\n                throw new Error('Config not fetched');\n            const totalAmount = request.reduce((sum, req) => sum + req.amount, 0);\n            if (totalAmount <= 0)\n                return { error: 'Invalid amount' };\n            const totalAtomicTokenAmount = this.toAtomicAmount(totalAmount, config.decimals);\n            const privateKey = PrivateKey.fromWif(wif);\n            const address = privateKey.toAddress();\n            const utxos = await this.getUtxos(address);\n            const totalUtxoAmount = utxos.reduce((sum, utxo) => sum + (utxo.data.bsv21.amt || 0), 0);\n            if (totalUtxoAmount < totalAtomicTokenAmount) {\n                return { error: 'Insufficient MNEE balance' };\n            }\n            const fee = request.find((req) => req.address === config.burnAddress) !== undefined\n                ? 0\n                : config.fees.find((fee) => totalAtomicTokenAmount >= fee.min && totalAtomicTokenAmount <= fee.max)?.fee;\n            if (fee === undefined)\n                return { error: 'Fee ranges inadequate' };\n            const tx = new Transaction(1, [], [], 0);\n            let tokensIn = 0;\n            const signingAddresses = [];\n            let changeAddress = '';\n            while (tokensIn < totalAtomicTokenAmount + fee) {\n                const utxo = utxos.shift();\n                if (!utxo)\n                    return { error: 'Insufficient MNEE balance' };\n                const sourceTransaction = await this.fetchBeef(utxo.txid);\n                if (!sourceTransaction)\n                    return { error: 'Failed to fetch source transaction' };\n                signingAddresses.push(utxo.owners[0]);\n                changeAddress = changeAddress || utxo.owners[0];\n                tx.addInput({\n                    sourceTXID: utxo.txid,\n                    sourceOutputIndex: utxo.vout,\n                    sourceTransaction,\n                    unlockingScript: new UnlockingScript(),\n                });\n                tokensIn += utxo.data.bsv21.amt;\n            }\n            for (const req of request) {\n                tx.addOutput(await this.createInscription(req.address, this.toAtomicAmount(req.amount, config.decimals), config));\n            }\n            if (fee > 0)\n                tx.addOutput(await this.createInscription(config.feeAddress, fee, config));\n            const change = tokensIn - totalAtomicTokenAmount - fee;\n            if (change > 0) {\n                tx.addOutput(await this.createInscription(changeAddress, change, config));\n            }\n            const sigRequests = tx.inputs.map((input, index) => {\n                if (!input.sourceTXID)\n                    throw new Error('Source TXID is undefined');\n                return {\n                    prevTxid: input.sourceTXID,\n                    outputIndex: input.sourceOutputIndex,\n                    inputIndex: index,\n                    address: signingAddresses[index],\n                    script: input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript.toHex(),\n                    satoshis: input.sourceTransaction?.outputs[input.sourceOutputIndex].satoshis || 1,\n                    sigHashType: TransactionSignature.SIGHASH_ALL |\n                        TransactionSignature.SIGHASH_ANYONECANPAY |\n                        TransactionSignature.SIGHASH_FORKID,\n                };\n            });\n            const rawtx = tx.toHex();\n            const res = await this.getSignatures({ rawtx, sigRequests }, privateKey);\n            if (!res?.sigResponses)\n                return { error: 'Failed to get signatures' };\n            for (const sigResponse of res.sigResponses) {\n                tx.inputs[sigResponse.inputIndex].unlockingScript = new Script()\n                    .writeBin(Utils.toArray(sigResponse.sig, 'hex'))\n                    .writeBin(Utils.toArray(sigResponse.pubKey, 'hex'));\n            }\n            const base64Tx = Utils.toBase64(tx.toBinary());\n            const response = await fetch(`${this.mneeApi}/v1/transfer?auth_token=${this.mneeApiToken}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ rawtx: base64Tx }),\n            });\n            if (!response.ok)\n                throw new Error(`HTTP error! status: ${response.status}`);\n            const { rawtx: responseRawtx } = await response.json();\n            if (!responseRawtx)\n                return { error: 'Failed to broadcast transaction' };\n            const decodedBase64AsBinary = Utils.toArray(responseRawtx, 'base64');\n            const tx2 = Transaction.fromBinary(decodedBase64AsBinary);\n            await this.broadcast(tx2);\n            return { txid: tx2.id('hex'), rawtx: Utils.toHex(decodedBase64AsBinary) };\n        }\n        catch (error) {\n            let errorMessage = 'Transaction submission failed';\n            if (error instanceof Error) {\n                errorMessage = error.message;\n                if (error.message.includes('HTTP error')) {\n                    // Add more specific error handling if needed based on response status\n                    console.error('HTTP error details:', error);\n                }\n            }\n            console.error('Failed to transfer tokens:', errorMessage);\n            return { error: errorMessage };\n        }\n    }\n    async getBalance(address) {\n        try {\n            const config = await this.getConfig();\n            if (!config)\n                throw new Error('Config not fetched');\n            const res = await this.getUtxos(address);\n            const balance = res.reduce((acc, utxo) => {\n                if (utxo.data.bsv21.op === 'transfer') {\n                    acc += utxo.data.bsv21.amt;\n                }\n                return acc;\n            }, 0);\n            const decimalAmount = parseFloat((balance / 10 ** (config.decimals || 0)).toFixed(config.decimals));\n            return { amount: balance, decimalAmount };\n        }\n        catch (error) {\n            console.error('Failed to fetch balance:', error);\n            return { amount: 0, decimalAmount: 0 };\n        }\n    }\n    async validateMneeTx(rawTx, request) {\n        try {\n            const tx = Transaction.fromHex(rawTx);\n            const scripts = tx.outputs.map((output) => output.lockingScript);\n            const parsedScripts = parseCosignerScripts(scripts);\n            if (!request) {\n                parsedScripts.forEach((parsed) => {\n                    if (parsed && parsed.cosigner !== this.MNEE_COSIGNER_PROD) {\n                        throw new Error(`Invalid cosigner: ${parsed.cosigner}`);\n                    }\n                });\n            }\n            else {\n                request.forEach((req, idx) => {\n                    const { address, amount } = req;\n                    const cosigner = parsedScripts.find((parsed) => parsed?.cosigner === this.MNEE_COSIGNER_PROD);\n                    if (!cosigner) {\n                        throw new Error(`Cosigner not found for address: ${address} at index: ${idx}`);\n                    }\n                    const addressFromScript = parsedScripts.find((parsed) => parsed?.address === address);\n                    if (!addressFromScript) {\n                        throw new Error(`Address not found in script for address: ${address} at index: ${idx}`);\n                    }\n                    const script = tx.outputs[idx].lockingScript;\n                    const inscription = parseInscription(script);\n                    const content = inscription?.file?.content;\n                    if (!content)\n                        throw new Error('Invalid inscription content');\n                    const inscriptionData = Utils.toUTF8(content);\n                    if (!inscriptionData)\n                        throw new Error('Invalid inscription content');\n                    const inscriptionJson = JSON.parse(inscriptionData);\n                    if (inscriptionJson.p !== 'bsv-20')\n                        throw new Error(`Invalid bsv 20 protocol: ${inscriptionJson.p}`);\n                    if (inscriptionJson.op !== 'transfer')\n                        throw new Error(`Invalid operation: ${inscriptionJson.op}`);\n                    if (inscriptionJson.id !== this.MNEE_TOKEN_ID)\n                        throw new Error(`Invalid token id: ${inscriptionJson.id}`);\n                    if (inscriptionJson.amt !== Math.round(amount * 10 ** this.MNEE_DECIMALS).toString()) {\n                        throw new Error(`Invalid amount: ${inscriptionJson.amt}`);\n                    }\n                });\n            }\n            return true;\n        }\n        catch (error) {\n            console.error(error);\n            return false;\n        }\n    }\n}\n//# sourceMappingURL=mneeService.js.map","references":["/Users/danwagner/Desktop/Code/mnee-ops/node_modules/@bsv/sdk/dist/types/mod.d.ts","/Users/danwagner/Desktop/Code/mnee-ops/src/mnee.types.ts","/Users/danwagner/Desktop/Code/mnee-ops/src/mneeCosignTemplate.ts","/Users/danwagner/Desktop/Code/mnee-ops/node_modules/js-1sat-ord/dist/index.d.ts","/Users/danwagner/Desktop/Code/mnee-ops/src/utils/helper.ts"],"map":"{\"version\":3,\"file\":\"mneeService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/mneeService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/danwagner/Desktop/Code/mnee-ops/dist/mneeService.d.ts","writeByteOrderMark":false,"text":"import { MNEEBalance, MNEEConfig, SendMNEE } from './mnee.types.js';\nexport declare class MNEEService {\n    private MNEE_TOKEN_ID;\n    private MNEE_COSIGNER_PROD;\n    private MNEE_DECIMALS;\n    private mneeApiToken;\n    private mneeApi;\n    private gorillaPoolApi;\n    constructor(apiToken?: string);\n    getConfig(): Promise<MNEEConfig | undefined>;\n    toAtomicAmount(amount: number, decimals: number): number;\n    private createInscription;\n    private getUtxos;\n    private broadcast;\n    private fetchBeef;\n    private getSignatures;\n    transfer(request: SendMNEE[], wif: string): Promise<{\n        txid?: string;\n        rawtx?: string;\n        error?: string;\n    }>;\n    getBalance(address: string): Promise<MNEEBalance>;\n    validateMneeTx(rawTx: string, request?: SendMNEE[]): Promise<boolean>;\n}\n"}}
